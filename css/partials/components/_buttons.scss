@use "sass:color";
@use "../utils";



// declaration of @property to allow the animation of the background-image that is not animatable
@property --color-gradient-1 {
    syntax: "<color>";
    inherits: true;
    initial-value: color.adjust(utils.$btn-bg-clr, $lightness: 5%);
}

@property --color-gradient-2 {
    syntax: "<color>";
    inherits: true;
    initial-value: color.adjust(utils.$btn-bg-clr-light, $lightness: 5%);
}

.btn {
    padding: 1rem 2rem;
    margin-block: 1rem;
    border-radius: 2rem;
    border-style: none;
    background: linear-gradient(to top, var(--color-gradient-1), var(--color-gradient-2));
    filter: drop-shadow(0px 5px 5px rgba(0, 0, 0, 0.2));
    --color-gradient-1: var(--btn-bg-clr);
    --color-gradient-2: var(--btn-bg-clr-light);
    @include utils.transition-out(filter, transform, --color-gradient-1, --color-gradient-2);

    &:hover {
        --color-gradient-1: initial; // i know this seems odd but it's the only way to make @property behave correctly
        --color-gradient-2: initial; // when modifying the value, it doesn't accept any function, only when declaring the initial-value
        filter: drop-shadow(0px 5px 5px rgba(0, 0, 0, 0.3));
        transform: scale(1.01);
        @include utils.transition-in(filter, transform, --color-gradient-1, --color-gradient-2);
    }

    .menu & {
        width: clamp(10rem, 80vw, 16rem);
    }
}

.icon-like {
    position: relative;
    font-size: 1.3125rem;
    @include utils.flex-center;

    .fa-heart {
        padding: 0.1rem;
        position: absolute;
        right: utils.$card-padding;
        @include utils.flex-center;
        transition: transform utils.$tr-time-out ease-in-out;
    }

    &-outline {
        transition: color utils.$tr-time-out ease-out;
    }

    &-outline:hover {
        color: transparent;
        transform: scale(1.2);
        transition: color utils.$tr-time-in ease-out, transform utils.$tr-time-in ease-in-out;
    }

    &-bg {
        transform: scale(0);
        opacity: 0.8;
        background: linear-gradient(to bottom, utils.$btn-bg-clr, utils.$btn-bg-clr-light);
        background-clip: text;
        color: transparent;
        transition: opacity utils.$tr-time-out ease-out;

        .icon-like:hover & {
            transform: scale(1.1);
            opacity: 1;
            transition: transform utils.$tr-time-in ease-in-out, opacity utils.$tr-time-in ease-out;
        }
    }
}